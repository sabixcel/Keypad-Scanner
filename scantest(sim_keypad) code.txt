entity sim_keypad is
-- Port ( );
end sim_keypad;

architecture Behavioral of sim_keypad is

component Keypad is
	Port ( clk : in BIT;
	R0 : in BIT;
	R1 : in BIT;
	R2 : in BIT;
	R3 : in BIT;
	C0 : inout BIT;
	C1 : inout BIT;
	C2 : inout BIT;
	N0 : out BIT;
	N1 : out BIT;
	N2 : out BIT;
	N3 : out BIT;
	Vout : out BIT);
end component Keypad;

type arr is array (0 to 14) of integer; -- array of keys to test
constant my_array: arr := (9,5,2,0,4,6,3,11,1,2,7,8,0,6,10);
signal clk, R0, R1, R2, R3, C0, C1, C2, Vout, N0, N1, N2, N3: bit; -- interface signals
signal N: unsigned(3 downto 0); -- N = N3N2N1N0 (4 binary numbers) --a signal that is defined as type unsigned means that the signal will be only positive
signal key_number: integer; -- key number to test

begin

	uut: Keypad port map(clk => clk,
		R0 => R0,
		R1 => R1,
		R2 => R2,
		R3 => R3,
		C0 => C0,
		C1 => C1,
		C2 => C2,
		N0 => N(0),
		N1 => N(1),
		N2 => N(2),
		N3 => N(3),
		Vout => Vout);

process -- generate clock signal
begin
	clk <= '1'; wait for 20 ns;
	clk <= '0'; wait for 20 ns;
end process;

-- this section imitate/match the keypad
R0 <= '1' when (C0 = '1' and key_number = 1) or (C1 = '1' and key_number = 2) or (C2 = '1' and key_number = 3)
else '0';
R1 <= '1' when (C0 = '1' and key_number = 4) or (C1 = '1' and key_number = 5) or (C2 = '1' and key_number = 6)
else '0';
R2 <= '1' when (C0 = '1' and key_number = 7) or (C1 = '1' and key_number = 8) or (C2 = '1' and key_number = 9)
else '0';
12
R3 <= '1' when (C0 = '1' and key_number = 10) or (C1 = '1' and key_number = 0) or (C2 = '1' and key_number = 11)
else '0';

process -- this section tests scanner
begin
	for i in 0 to 14 loop -- test every number in key array
		key_number <= my_array(i); -- simulates keypress
		wait until (Vout = '1' and rising_edge(clk));
		-- if to_integer(N) = key_number) -- check if output matches
		-- number match (Vout = '1')
		-- else numbers don't match

		key_number <= 15; -- equivalent to no key pressed
		wait until rising_edge(clk); -- wait for scanner to reset
		wait until rising_edge(clk);
		wait until rising_edge(clk);
	end loop;
	-- test complete

	end process;
end Behavioral;